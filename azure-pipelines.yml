
jobs:
- job: BuildAndTest
  strategy:
    matrix:
      x86:
        BuildPlatform: x86
        BuildConfiguration: Release
      x64:
        BuildPlatform: x64
        BuildConfiguration: Release
  pool:
    vmImage: 'windows-latest'

  variables:
    BuildOutputPath: '$(Build.SourcesDirectory)\BuildOutput\$(BuildConfiguration)\$(BuildPlatform)'

  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@0

  # The 'NuGetCommand' name is ambiguous, so we use the task GUID instead.
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore src\UnitTests\UnitTests.sln'
    inputs:
      command: 'restore'
      restoreSolution: 'src\UnitTests\UnitTests.sln'
      feedsToUse: config
      nugetConfigPath: 'nuget.config'
      restoreDirectory: packages

  - powershell: |
      Write-Host ""
      Write-Host "$(BUILD.BINARIESDIRECTORY)"
      Tree /F /A $(BUILD.BINARIESDIRECTORY)
      Write-Host ""
      Write-Host "$(BUILD.SourcesDirectory)"
      Tree /F /A $(BUILD.SourcesDirectory)
    displayName: 'DIAG: dir'

  - task: MSBuild@1
    displayName: Build solution
    inputs:
      solution: 'src\UnitTests\UnitTests.sln'
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      clean: true
      maximumCpuCount: true
      createLogFile: true

  - powershell: |
      Write-Host ""
      Write-Host "$(BUILD.BINARIESDIRECTORY)"
      Tree /F /A $(BUILD.BINARIESDIRECTORY)
      Write-Host ""
      Write-Host "$(BUILD.SourcesDirectory)"
      Tree /F /A $(BUILD.SourcesDirectory)
    displayName: 'DIAG: dir'

  # Run the unit test locally on the Azure VM by using VSTest (which will use the TAEF Adapter).
  # Commented out for now.
  # - task: VSTest@2
  #   displayName: Run UnitTests
  #   inputs:
  #     testSelector: 'testAssemblies'
  #     testAssemblyVer2: '**\*.UnitTests.dll'
  #     searchFolder: '$(BuildOutputPath)'
  #     runInParallel: false
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(buildConfiguration)'

  # Copy and Publish the test binaries so we can run them in Helix later.
  - task: CopyFiles@2
    displayName: 'Copy test binaries'
    inputs:
      SourceFolder: '$(BuildOutputPath)'
      Contents: |
        TestApp.Managed.UnitTests\**
      TargetFolder: '$(Agent.TempDirectory)\testbin\$(buildPlatform)'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish test binaries'
    inputs:
      PathtoPublish: '$(Agent.TempDirectory)\testbin\$(buildPlatform)'
      artifactName: test_binaries_$(buildPlatform)

# Run the tests in Helix
- template: build\AzurePipelinesTemplates\WindowsAppSDK-RunHelixTests-Job.yml
  parameters:
    name: 'RunTestsInHelix'
    dependsOn:
      - BuildAndTest
    condition: in(dependencies.BuildAndTest.result, 'Succeeded', 'SucceededWithIssues')
